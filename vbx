#!/bin/bash

# VBXModProbe - Advanced VirtualBox Setup Toolkit
# Comprehensive Linux Virtualization Management Script
# Author: 0xb0rn3
# Version: 0.3

# Core Configuration and Constants
# ================================

# Color Palette for Enhanced Visual Feedback
RESET='\033[0m'
BLACK='\033[0;30m'
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[0;37m'

# Aesthetic Formatting
HR='‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ'
SCRIPT_NAME="VBXModProbe"

# Logging and Output Utilities
# ============================

# Advanced Logging Function
_log() {
    local type=$1
    local message=$2
    local color

    case $type in
        "info")    color=$GREEN; prefix="[‚ÑπÔ∏è INFO]";;
        "warn")    color=$YELLOW; prefix="[‚ö†Ô∏è WARNING]";;
        "error")   color=$RED; prefix="[‚ùå ERROR]";;
        "success") color=$PURPLE; prefix="[‚úÖ SUCCESS]";;
        "debug")   color=$CYAN; prefix="[üêû DEBUG]";;
    esac

    printf "${color}${prefix}${RESET} %s\n" "$message"
}

# Spinner for Long-Running Tasks
spinner() {
    local pid=$!
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " ${BLUE}[%c]${RESET}  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# System and Security Checks
# ==========================

# Root Privilege Verification
check_root() {
    [[ $EUID -ne 0 ]] && {
        _log "error" "This script requires root privileges. Use sudo."
        exit 1
    }
}

# Virtualization Capability Check
check_virtualization() {
    _log "info" "Analyzing Virtualization Capabilities..."
    
    # CPU Virtualization Support
    vmx_count=$(egrep -c '(vmx|svm)' /proc/cpuinfo)
    if [[ $vmx_count -eq 0 ]]; then
        _log "error" "No virtualization support detected in CPU"
        return 1
    fi

    # Detailed Virtualization Information
    _log "info" "Virtualization Technologies Detected:"
    egrep '(vmx|svm)' /proc/cpuinfo | head -n 1

    # IOMMU and Virtualization Extensions
    if [[ -f /sys/class/iommu/devices ]]; then
        _log "success" "IOMMU Support Verified"
    else
        _log "warn" "IOMMU Support Not Detected"
    fi
}

# Dependency and Package Management
# =================================

# Comprehensive Dependency Check
check_dependencies() {
    _log "info" "Performing Comprehensive Dependency Audit"
    
    local dependencies=(
        "virtualbox:VirtualBox Package"
        "dkms:Dynamic Kernel Module Support"
        "mokutil:Machine Owner Key Utility"
        "openssl:SSL/TLS Toolkit"
        "linux-headers-$(uname -r):Kernel Headers"
    )

    for dep in "${dependencies[@]}"; do
        package=${dep%:*}
        description=${dep#*:}
        
        if command -v "$package" &> /dev/null || dpkg -s "$package" &> /dev/null; then
            _log "success" "‚úì $description ($package) is installed"
        else
            _log "warn" "‚ö†Ô∏è $description ($package) is NOT installed"
        fi
    done
}

# Install Missing Dependencies
install_dependencies() {
    _log "info" "Installing/Updating VirtualBox Dependencies"
    
    packages=(
        "virtualbox"
        "virtualbox-dkms"
        "virtualbox-ext-pack"
        "linux-headers-$(uname -r)"
        "dkms"
        "build-essential"
        "mokutil"
        "openssl"
    )

    apt-get update
    for pkg in "${packages[@]}"; do
        apt-get install -y "$pkg"
    done
}

# Virtualization Configuration
# ===========================

# Disable KVM Interference
disable_kvm() {
    _log "info" "Mitigating KVM Conflicts"
    
    # Unload KVM modules
    for module in kvm_intel kvm_amd kvm; do
        modprobe -r "$module" 2>/dev/null
    done

    # Prevent automatic loading
    {
        echo "blacklist kvm"
        echo "blacklist kvm_intel"
        echo "blacklist kvm_amd"
    } > /etc/modprobe.d/blacklist-kvm.conf
}

# GRUB Configuration for Virtualization
configure_grub() {
    _log "info" "Optimizing GRUB for Virtualization"
    
    cp /etc/default/grub /etc/default/grub.backup

    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 intel_iommu=off kvm-intel.nested=0 nouveau.modeset=0"/' /etc/default/grub

    update-grub
}

# Kernel Module Signing
sign_modules() {
    _log "info" "Signing VirtualBox Kernel Modules"
    
    mkdir -p /root/module-signing
    cd /root/module-signing

    # Generate signing keys
    openssl req -new -x509 -newkey rsa:2048 \
        -keyout MOK.priv -outform DER -out MOK.der \
        -nodes -days 36500 -subj "/CN=VirtualBox/"

    chmod 600 MOK.priv

    # Sign VirtualBox modules
    modules=("vboxdrv" "vboxnetflt" "vboxnetadp" "vboxpci")
    for module in "${modules[@]}"; do
        /usr/src/linux-headers-"$(uname -r)"/scripts/sign-file sha256 \
            MOK.priv MOK.der "$(modinfo -n "$module")"
    done

    # Enroll Machine Owner Key
    mokutil --import MOK.der
}

# VirtualBox Configuration
configure_virtualbox() {
    _log "info" "Configuring VirtualBox Environment"
    
    # Rebuild kernel modules
    /sbin/vboxconfig

    # Add current user to vboxusers group
    current_user=$(logname)
    usermod -aG vboxusers "$current_user"
}

# System Verification and Diagnostics
verify_setup() {
    _log "info" "Performing Comprehensive System Verification"
    
    # Module Loading Status
    _log "debug" "Loaded Kernel Modules:"
    lsmod | grep -E "vbox|kvm"

    # VirtualBox Version
    _log "info" "VirtualBox Version:"
    VBoxManage --version

    # Kernel Module Diagnostics
    _log "debug" "Kernel Module Messages:"
    dmesg | grep -iE "vbox|kvm|vmx"
}

# Interactive User Interface
# =========================

# System Banner
system_banner() {
    clear
    printf "${PURPLE}
 ‚ñà‚ñà‚ñí   ‚ñà‚ñì ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñÑ     ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñÑ‚ñÑ     
‚ñì‚ñà‚ñà‚ñë   ‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå    ‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ   
 ‚ñì‚ñà‚ñà  ‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñë ‚ñì‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ 
  ‚ñí‚ñà‚ñà ‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ    ‚ñë ‚ñì‚ñà‚ñà‚ñÑ   ‚ñí‚ñì‚ñà  ‚ñÑ ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà
   ‚ñí‚ñÄ‚ñà‚ñë  ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí   ‚ñí   ‚ñà‚ñà‚ñí ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí
   ‚ñë ‚ñê‚ñë  ‚ñë‚ñì  ‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë
   ‚ñë ‚ñë‚ñë   ‚ñí ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë  ‚ñë ‚ñë  ‚ñë  ‚ñí   ‚ñí‚ñí 
     ‚ñë‚ñë   ‚ñí ‚ñë  ‚ñë‚ñë   ‚ñë    ‚ñë ‚ñë‚ñí  ‚ñë ‚ñë    ‚ñë     ‚ñë   ‚ñí  
      ‚ñë   ‚ñë     ‚ñë        ‚ñë  ‚ñë  ‚ñë      ‚ñë  ‚ñë      ‚ñë  
     ‚ñë                         Setup Toolkit       
${RESET}"
    printf "${CYAN}${HR}${RESET}\n"
}

# Interactive Confirmation
confirm() {
    read -p "${YELLOW}[‚ùì] $1 (y/N): ${RESET}" response
    [[ ${response,,} =~ ^(yes|y)$ ]]
}

# Main Execution Flow
# ==================

main() {
    # Parse Command Line Arguments
    case "${1:-}" in
        --verify)
            system_banner
            verify_setup
            exit 0
            ;;
        --help)
            system_banner
            echo "Usage: $0 [--verify] [--help]"
            echo "  Default: Full VirtualBox setup"
            echo "  --verify: Check current VirtualBox configuration"
            echo "  --help: Display this help message"
            exit 0
            ;;
    esac

    # System Preparation
    system_banner
    check_root
    check_virtualization
    check_dependencies

    # Interactive Pre-flight
    if ! confirm "Would you like to proceed with VirtualBox setup?"; then
        _log "info" "Setup aborted by user."
        exit 0
    fi

    # Core Setup Stages
    install_dependencies
    disable_kvm
    configure_grub
    sign_modules
    configure_virtualbox
    verify_setup

    # Final Recommendations
    _log "success" "VirtualBox Setup Completed Successfully!"
    echo "Recommended: Reboot your system to apply all changes."
}

# Script Entry Point
main "$@"
