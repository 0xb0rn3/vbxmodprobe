#!/usr/bin/env bash

# VBXModProbe - Comprehensive VirtualBox Setup and Troubleshooting Tool
# Author: 0xb0rn3

# Color Codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging Functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# Root Check
check_root() {
    [[ $EUID -ne 0 ]] && {
        log_error "This script must be run as root. Use sudo."
        exit 1
    }
}

# System Compatibility Checks
check_virtualization() {
    log_info "Checking Virtualization Support..."
    
    # Check CPU Virtualization
    vmx_count=$(egrep -c '(vmx|svm)' /proc/cpuinfo)
    [[ $vmx_count -eq 0 ]] && {
        log_error "No virtualization support detected in CPU"
        return 1
    }

    # Check BIOS/UEFI Virtualization
    virt_status=$(systemd-detect-virt)
    [[ "$virt_status" != "none" ]] && log_warn "Running in virtualized environment: $virt_status"

    # Additional Virtualization Details
    log_info "Virtualization Technologies:"
    egrep '(vmx|svm)' /proc/cpuinfo | head -n 1
    
    return 0
}

# Disable KVM Interference
disable_kvm() {
    log_info "Disabling KVM Modules..."
    
    # Unload KVM modules if loaded
    for module in kvm_intel kvm_amd kvm; do
        modprobe -r "$module" 2>/dev/null
    done

    # Prevent automatic loading
    echo "blacklist kvm" >> /etc/modprobe.d/blacklist-kvm.conf
    echo "blacklist kvm_intel" >> /etc/modprobe.d/blacklist-kvm.conf
    echo "blacklist kvm_amd" >> /etc/modprobe.d/blacklist-kvm.conf
}

# Grub Configuration for Virtualization
configure_grub() {
    log_info "Configuring GRUB for Virtualization..."
    
    # Backup original grub config
    cp /etc/default/grub /etc/default/grub.backup

    # Modify GRUB parameters
    sed -i 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 intel_iommu=off kvm-intel.nested=0 nouveau.modeset=0"/' /etc/default/grub

    # Update GRUB configuration
    update-grub
}

# Install VirtualBox Dependencies
install_dependencies() {
    log_info "Installing VirtualBox Dependencies..."
    
    packages=(
        "virtualbox"
        "virtualbox-dkms"
        "virtualbox-ext-pack"
        "linux-headers-$(uname -r)"
        "dkms"
        "build-essential"
        "mokutil"
        "openssl"
    )

    for pkg in "${packages[@]}"; do
        apt-get install -y "$pkg"
    done
}

# Kernel Module Signing
sign_modules() {
    log_info "Signing VirtualBox Kernel Modules..."
    
    # Create signing directory
    mkdir -p /root/module-signing
    cd /root/module-signing

    # Generate keys
    openssl req -new -x509 -newkey rsa:2048 \
        -keyout MOK.priv -outform DER -out MOK.der \
        -nodes -days 36500 -subj "/CN=VirtualBox/"

    chmod 600 MOK.priv

    # Sign modules
    modules=("vboxdrv" "vboxnetflt" "vboxnetadp" "vboxpci")
    for module in "${modules[@]}"; do
        /usr/src/linux-headers-"$(uname -r)"/scripts/sign-file sha256 \
            MOK.priv MOK.der "$(modinfo -n "$module")"
    done

    # Enroll MOK
    mokutil --import MOK.der
}

# VirtualBox Configuration
configure_virtualbox() {
    log_info "Configuring VirtualBox..."
    
    # Rebuild kernel modules
    /sbin/vboxconfig

    # Add current user to vboxusers group
    current_user=$(logname)
    usermod -aG vboxusers "$current_user"
}

# System Verification
verify_setup() {
    log_info "Verifying VirtualBox Setup..."
    
    # Check module loading
    lsmod | grep -E "vbox|kvm"

    # VirtualBox version
    VBoxManage --version

    # List kernel modules
    dmesg | grep -iE "vbox|kvm|vmx"
}

# Main Execution
main() {
    check_root
    
    case "${1:-}" in
        --verify)
            verify_setup
            exit 0
            ;;
        --help)
            echo "Usage: $0 [--verify] [--help]"
            exit 0
            ;;
    esac

    check_virtualization
    disable_kvm
    configure_grub
    install_dependencies
    sign_modules
    configure_virtualbox
    verify_setup

    log_warn "Reboot recommended to apply all changes!"
}

# Run main function
main "$@"
